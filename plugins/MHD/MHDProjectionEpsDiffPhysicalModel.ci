namespace COOLFluiD {

  namespace Physics {

    namespace MHD {

//////////////////////////////////////////////////////////////////////////////

template <int DIM>
MHDProjectionEpsDiffPhysicalModel<DIM>::MHDProjectionEpsDiffPhysicalModel(const std::string& name)
  : Framework::ConvectionDiffusionPM<MHDProjectionEpsTerm, MHDProjectionDiffTerm>(name)
{
}

//////////////////////////////////////////////////////////////////////////////

template <int DIM>
MHDProjectionEpsDiffPhysicalModel<DIM>::~MHDProjectionEpsDiffPhysicalModel()
{
}

//////////////////////////////////////////////////////////////////////////////

template <int DIM>
CFuint MHDProjectionEpsDiffPhysicalModel<DIM>::getDimension() const
{
  return DIM;
}

//////////////////////////////////////////////////////////////////////////////

template <int DIM>
CFuint MHDProjectionEpsDiffPhysicalModel<DIM>::getNbEquations() const
{
  return 11;
}

//////////////////////////////////////////////////////////////////////////////

template <int DIM>
std::string MHDProjectionEpsDiffPhysicalModel<DIM>::getConvectiveName() const
{
 return std::string("MHD" + Common::StringOps::to_str(DIM) + "DProjectionEps");	
}

//////////////////////////////////////////////////////////////////////////////

template <int DIM>
std::string MHDProjectionEpsDiffPhysicalModel<DIM>::getDiffusiveName() const
{
  return getTypeName();
}

//////////////////////////////////////////////////////////////////////////////

template <int DIM>
void MHDProjectionEpsDiffPhysicalModel<DIM>::setReferenceValues()
{
}
      
//////////////////////////////////////////////////////////////////////////////

template <int DIM>
void MHDProjectionEpsDiffPhysicalModel<DIM>::setReferenceTime()
{
  /// @warning the reference time set below is only okay if the reference length is equal
  /// to one, or if the diffusion coefficient is equal to zero. To make it general, the diffusion
   /// coefficient should be rescaled also.
  _refTime = getRefLength();
}

//////////////////////////////////////////////////////////////////////////////

template <int DIM>
void MHDProjectionEpsDiffPhysicalModel<DIM>::configure ( Config::ConfigArgs& args )
{
  Framework::ConvectionDiffusionPM<MHDProjectionEpsTerm, MHDProjectionDiffTerm>::configure(args);

  cf_assert(getDimension() > 0);
  cf_assert(getNbEquations() > 0);

  // allocate jacobians
  _jacobians = std::vector<RealMatrix>(DIM);
  for (CFuint i = 0; i < getDimension(); ++i) {
    _jacobians[i].resize(getNbEquations(), getNbEquations());
  }
}

//////////////////////////////////////////////////////////////////////////////

    } // namespace MHD 

  } // namespace Physics

} // namespace COOLFluiD

//////////////////////////////////////////////////////////////////////////////

